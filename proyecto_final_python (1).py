# -*- coding: utf-8 -*-
"""Proyecto final python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13bZPIlwUkAJNqXr8_pM_wxNSHJkIjM8Y

# ***PROYECTO FINAL PYTHON - BLOG CON DJANGO***

**Primero instalamos la dependencia**
"""

!pip install django==5.0.6

"""**Creamos el proyecto y apps**"""

# Commented out IPython magic to ensure Python compatibility.
!django-admin startproject blogproject
# %cd blogproject
!python manage.py startapp accounts
!python manage.py startapp blog
!python manage.py startapp messages_app

"""**Configuramos settings.py**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile blogproject/settings.py
# import os
# from pathlib import Path
# 
# BASE_DIR = Path(__file__).resolve().parent.parent
# 
# SECRET_KEY = 'django-insecure-proyecto-final'
# DEBUG = True
# 
# CSRF_TRUSTED_ORIGINS = [
#     "https://*.ngrok-free.app",
#     "https://*.ngrok-free.dev"
# ]
# 
# ALLOWED_HOSTS = ["*",]
# 
# 
# INSTALLED_APPS = [
#     'django.contrib.admin',
#     'django.contrib.auth',
#     'django.contrib.contenttypes',
#     'django.contrib.sessions',
#     'django.contrib.messages',
#     'django.contrib.staticfiles',
#     'accounts',
#     'blog',
#     'messages_app',
# ]
# 
# MIDDLEWARE = [
#     'django.middleware.security.SecurityMiddleware',
#     'django.contrib.sessions.middleware.SessionMiddleware',
#     'django.middleware.common.CommonMiddleware',
#     'django.middleware.csrf.CsrfViewMiddleware',
#     'django.contrib.auth.middleware.AuthenticationMiddleware',
#     'django.contrib.messages.middleware.MessageMiddleware',
#     'django.middleware.clickjacking.XFrameOptionsMiddleware',
# ]
# 
# ROOT_URLCONF = 'blogproject.urls'
# 
# TEMPLATES = [
#     {
#         'BACKEND': 'django.template.backends.django.DjangoTemplates',
#         'DIRS': [BASE_DIR / 'templates'],
#         'APP_DIRS': True,
#         'OPTIONS': {
#             'context_processors': [
#                 'django.template.context_processors.debug',
#                 'django.template.context_processors.request',
#                 'django.contrib.auth.context_processors.auth',
#                 'django.contrib.messages.context_processors.messages',
#             ],
#         },
#     },
# ]
# 
# WSGI_APPLICATION = 'blogproject.wsgi.application'
# 
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# 
# AUTH_PASSWORD_VALIDATORS = [
#     {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
#     {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
# ]
# 
# LANGUAGE_CODE = 'es-ar'
# TIME_ZONE = 'UTC'
# USE_I18N = True
# USE_TZ = True
# 
# STATIC_URL = 'static/'
# MEDIA_URL = '/media/'
# MEDIA_ROOT = BASE_DIR / 'media'
# 
# DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
# 
# 
#

"""**Modelos**

**accounts/models.py**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile accounts/models.py
# from django.contrib.auth.models import User
# from django.db import models
# from django.db.models.signals import post_save
# from django.dispatch import receiver
# 
# 
# @receiver(post_save, sender=User)
# def create_or_update_user_profile(sender, instance, created, **kwargs):
#     if created:
#         Profile.objects.create(user=instance)
#     else:
#         instance.profile.save()
# 
# 
# 
# class Profile(models.Model):
#     user = models.OneToOneField(User, on_delete=models.CASCADE)
#     bio = models.TextField(blank=True, null=True)
#     image = models.ImageField(upload_to='profiles/', blank=True, null=True)
# 
#     def __str__(self):
#         return self.user.username
#

"""**blog/models.py**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile blog/models.py
# from django.db import models
# from django.contrib.auth.models import User
# 
# class Post(models.Model):
#     title = models.CharField(max_length=200)
#     subtitle = models.CharField(max_length=200, blank=True, null=True)
#     body = models.TextField()
#     author = models.ForeignKey(User, on_delete=models.CASCADE)
#     date = models.DateTimeField(auto_now_add=True)
#     image = models.ImageField(upload_to='posts/', blank=True, null=True)
# 
#     def __str__(self):
#         return self.title
#

"""**messages_app/models.py**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile messages_app/models.py
# from django.db import models
# from django.contrib.auth.models import User
# 
# class Message(models.Model):
#     sender = models.ForeignKey(User, related_name='sent_messages', on_delete=models.CASCADE)
#     receiver = models.ForeignKey(User, related_name='received_messages', on_delete=models.CASCADE)
#     content = models.TextField()
#     timestamp = models.DateTimeField(auto_now_add=True)
# 
#     def __str__(self):
#         return f"De {self.sender} a {self.receiver}"
#

"""**Admin**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile accounts/admin.py
# from django.contrib import admin
# from .models import Profile
# admin.site.register(Profile)
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile blog/admin.py
# from django.contrib import admin
# from .models import Post
# admin.site.register(Post)
#

# Commented out IPython magic to ensure Python compatibility.
# %%writefile messages_app/admin.py
# from django.contrib import admin
# from .models import Message
# admin.site.register(Message)
#

"""**Views y URLs**

**accounts/views.py**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile accounts/views.py
# from django.shortcuts import render, redirect
# from django.contrib.auth import login, authenticate, logout
# from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
# from .models import Profile
# from django.contrib.auth.decorators import login_required
# 
# def signup_view(request):
#     if request.method == 'POST':
#         form = UserCreationForm(request.POST)
#         if form.is_valid():
#             user = form.save()
#             Profile.objects.create(user=user)
#             login(request, user)
#             return redirect('home')
#     else:
#         form = UserCreationForm()
#     return render(request, 'accounts/signup.html', {'form': form})
# 
# def login_view(request):
#     if request.method == 'POST':
#         form = AuthenticationForm(request, data=request.POST)
#         if form.is_valid():
#             user = form.get_user()
#             login(request, user)
#             return redirect('home')
#     else:
#         form = AuthenticationForm()
#     return render(request, 'accounts/login.html', {'form': form})
# 
# def logout_view(request):
#     logout(request)
#     return redirect('login')
# 
# @login_required
# def profile_view(request):
#     profile = Profile.objects.get(user=request.user)
#     return render(request, 'accounts/profile.html', {'profile': profile})
#

"""**blog/views.py**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile blog/views.py
# from django.shortcuts import render, get_object_or_404, redirect
# from .models import Post
# from django.contrib.auth.decorators import login_required
# 
# def home(request):
#     posts = Post.objects.all().order_by('-date')
#     return render(request, 'blog/home.html', {'posts': posts})
# 
# @login_required
# def create_post(request):
#     if request.method == 'POST':
#         title = request.POST['title']
#         subtitle = request.POST['subtitle']
#         body = request.POST['body']
#         image = request.FILES.get('image')
#         Post.objects.create(title=title, subtitle=subtitle, body=body, author=request.user, image=image)
#         return redirect('home')
#     return render(request, 'blog/create_post.html')
# 
# def post_detail(request, pk):
#     post = get_object_or_404(Post, pk=pk)
#     return render(request, 'blog/post_detail.html', {'post': post})
#

"""**messages_app/views.py**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile messages_app/views.py
# from django.shortcuts import render, redirect
# from django.contrib.auth.decorators import login_required
# from .models import Message
# from django.contrib.auth.models import User
# 
# @login_required
# def inbox(request):
#     messages = Message.objects.filter(receiver=request.user).order_by('-timestamp')
#     return render(request, 'messages_app/inbox.html', {'messages': messages})
# 
# @login_required
# def send_message(request):
#     if request.method == 'POST':
#         receiver_id = request.POST['receiver']
#         content = request.POST['content']
#         receiver = User.objects.get(id=receiver_id)
#         Message.objects.create(sender=request.user, receiver=receiver, content=content)
#         return redirect('inbox')
#     users = User.objects.exclude(id=request.user.id)
#     return render(request, 'messages_app/send_message.html', {'users': users})
#

"""**blogproject/urls.py**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile blogproject/urls.py
# from django.contrib import admin
# from django.urls import path
# from accounts.views import signup_view, login_view, logout_view, profile_view
# from blog.views import home, create_post, post_detail
# from messages_app.views import inbox, send_message
# 
# urlpatterns = [
#     path('admin/', admin.site.urls),
#     path('', home, name='home'),
#     path('signup/', signup_view, name='signup'),
#     path('login/', login_view, name='login'),
#     path('logout/', logout_view, name='logout'),
#     path('profile/', profile_view, name='profile'),
#     path('create/', create_post, name='create_post'),
#     path('post/<int:pk>/', post_detail, name='post_detail'),
#     path('inbox/', inbox, name='inbox'),
#     path('send/', send_message, name='send_message'),
# ]
#

"""**Templates**

**Creamos carpetas:**
"""

!mkdir templates
!mkdir templates/accounts templates/blog templates/messages_app

"""**Base templates/base.html**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/base.html
# <!DOCTYPE html>
# <html lang="es">
# <head>
#     <meta charset="UTF-8">
#     <title>Blog Proyecto</title>
#     <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
# </head>
# <body>
# <nav class="navbar navbar-expand-lg navbar-dark bg-dark mb-4">
#   <div class="container-fluid">
#     <a class="navbar-brand" href="/">Mi Blog</a>
#     <div class="collapse navbar-collapse">
#       <ul class="navbar-nav ms-auto">
#         {% if user.is_authenticated %}
#           <li class="nav-item"><a class="nav-link" href="/profile/">Perfil</a></li>
#           <li class="nav-item"><a class="nav-link" href="/create/">Crear Post</a></li>
#           <li class="nav-item"><a class="nav-link" href="/inbox/">Mensajes</a></li>
#           <li class="nav-item"><a class="nav-link" href="/logout/">Salir</a></li>
#         {% else %}
#           <li class="nav-item"><a class="nav-link" href="/signup/">Registro</a></li>
#           <li class="nav-item"><a class="nav-link" href="/login/">Ingresar</a></li>
#         {% endif %}
#       </ul>
#     </div>
#   </div>
# </nav>
# <div class="container">
#     {% block content %}{% endblock %}
# </div>
# </body>
# </html>
#

"""**templates/blog/home.html**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/blog/home.html
# {% extends 'base.html' %}
# {% block content %}
# <h2>Últimos Posts</h2>
# <div class="row">
#   {% for post in posts %}
#   <div class="col-md-4">
#     <div class="card mb-3">
#       {% if post.image %}
#       <img src="{{ post.image.url }}" class="card-img-top" alt="...">
#       {% endif %}
#       <div class="card-body">
#         <h5 class="card-title">{{ post.title }}</h5>
#         <p class="card-text">{{ post.subtitle }}</p>
#         <a href="/post/{{ post.id }}/" class="btn btn-primary">Leer más</a>
#       </div>
#     </div>
#   </div>
#   {% endfor %}
# </div>
# {% endblock %}
#

"""**templates/blog/create_post.html**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/blog/create_post.html
# {% extends 'base.html' %}
# {% block content %}
# <h2>Crear Post</h2>
# <form method="post" enctype="multipart/form-data">
#   {% csrf_token %}
#   <input type="text" name="title" placeholder="Título" class="form-control mb-2">
#   <input type="text" name="subtitle" placeholder="Subtítulo" class="form-control mb-2">
#   <textarea name="body" placeholder="Contenido" class="form-control mb-2"></textarea>
#   <input type="file" name="image" class="form-control mb-2">
#   <button type="submit" class="btn btn-success">Publicar</button>
# </form>
# {% endblock %}
#

"""**templates/blog/post_detail.html**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/blog/post_detail.html
# {% extends 'base.html' %}
# {% block content %}
# <h2>{{ post.title }}</h2>
# <h4>{{ post.subtitle }}</h4>
# <p>{{ post.body }}</p>
# <p><b>Autor:</b> {{ post.author.username }} | {{ post.date }}</p>
# {% if post.image %}
# <img src="{{ post.image.url }}" class="img-fluid">
# {% endif %}
# {% endblock %}
#

"""**templates/accounts/signup.html**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/accounts/signup.html
# {% extends 'base.html' %}
# {% block content %}
# <h2>Registro</h2>
# <form method="post">
#   {% csrf_token %}
#   {{ form.as_p }}
#   <button type="submit" class="btn btn-primary">Registrarse</button>
# </form>
# {% endblock %}
#

"""**templates/accounts/login.html**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/accounts/login.html
# {% extends 'base.html' %}
# {% block content %}
# <h2>Ingresar</h2>
# <form method="post">
#   {% csrf_token %}
#   {{ form.as_p }}
#   <button type="submit" class="btn btn-success">Entrar</button>
# </form>
# {% endblock %}
#

"""**templates/accounts/profile.html**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/accounts/profile.html
# {% extends 'base.html' %}
# {% block content %}
# <h2>Perfil de {{ profile.user.username }}</h2>
# {% if profile.image %}
# <img src="{{ profile.image.url }}" class="img-thumbnail mb-2" style="max-width:150px;">
# {% endif %}
# <p><b>Bio:</b> {{ profile.bio }}</p>
# {% endblock %}
#

"""**templates/messages_app/inbox.html**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/messages_app/inbox.html
# {% extends 'base.html' %}
# {% block content %}
# <h2>Inbox</h2>
# <ul class="list-group">
#   {% for message in messages %}
#   <li class="list-group-item">
#     <b>{{ message.sender.username }}</b>: {{ message.content }} <br>
#     <small>{{ message.timestamp }}</small>
#   </li>
#   {% empty %}
#   <li class="list-group-item">No tienes mensajes.</li>
#   {% endfor %}
# </ul>
# <a href="/send/" class="btn btn-primary mt-3">Enviar mensaje</a>
# {% endblock %}
#

"""**templates/messages_app/send_message.html**"""

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/messages_app/send_message.html
# {% extends 'base.html' %}
# {% block content %}
# <h2>Enviar Mensaje</h2>
# <form method="post">
#   {% csrf_token %}
#   <select name="receiver" class="form-control mb-2">
#     {% for user in users %}
#       <option value="{{ user.id }}">{{ user.username }}</option>
#     {% endfor %}
#   </select>
#   <textarea name="content" placeholder="Escribe tu mensaje" class="form-control mb-2"></textarea>
#   <button type="submit" class="btn btn-success">Enviar</button>
# </form>
# {% endblock %}
#

"""**Migrar y crear superusuario**"""

!python manage.py makemigrations
!python manage.py migrate
!python manage.py createsuperuser

"""**Para ver el proyecto instalamos ngrok**"""

!pip install pyngrok

"""**Importamos y configuramos**"""

from pyngrok import ngrok, conf


conf.get_default().auth_token = "339DJAiYQseRzoEA2hIdocLdrpF_81mdBwixRncWtqvdywn4q"

"""**Abrir túnel**"""

public_url = ngrok.connect(8000)
print("Tu app está disponible en:", public_url)

"""**Correr servidor**"""

!python manage.py runserver 0.0.0.0:8000 &

!python manage.py runserver 0.0.0.0:8000

"""**Documentación**

%%writefile README.md
# Proyecto Final Python – Blog con Django

Es una aplicación web desarrollada con **Django** que permite gestionar usuarios, publicaciones de blog y un sistema de mensajería interna.

Funcionalidades principales

 Gestión de usuarios
- Registro de nuevos usuarios.
- Login y logout.
- Perfil de usuario con imagen y biografía.

 Blog
- Creación de publicaciones (CRUD básico).
- Título, subtítulo, cuerpo, autor, fecha y opcionalmente imagen.
- Listado de publicaciones en la página principal.
- Detalle de cada publicación.

 Mensajería interna
- Enviar mensajes entre usuarios registrados.
- Bandeja de entrada (Inbox).
- Historial de mensajes recibidos.

Tecnologías utilizadas

- **Python 3.10+**
- **Django 5.0.6**
- **SQLite3** (base de datos por defecto)
- **Bootstrap 5** (para estilos y diseño responsivo)

Usuario creado

Nombre de usuario: Invitado
Contraseña: Prueba2025

 Estructura del proyecto

 blogproject/
│
├── blog/ # App de publicaciones
├── accounts/ # App de usuarios y perfiles
├── messages_app/ # App de mensajería interna
├── templates/ # Archivos HTML con Bootstrap
│ ├── base.html
│ ├── blog/
│ ├── accounts/
│ └── messages_app/
├── db.sqlite3 # Base de datos
├── manage.py # Comando principal de Django
└── blogproject/ # Configuración principal (settings, urls)

**Tests**

Cada app incluye un archivo básico de tests para verificar:

Creación de usuario y perfil.

Creación de post.

Envío de mensajes.

**Futuras mejoras**

Paginación de publicaciones.

Edición y borrado de posts desde el frontend.

Editar perfil con formulario dinámico.

Notificaciones en tiempo real para mensajes nuevos.
"""